package ${target.javaPackageFromFolder($SRC)};

/**
 * 
 * Very simple persistence service provider (just for tests)
 *
 */
public class PersistenceServiceProvider {

	private final static String SERVICES_ROOT_PACKAGE = PersistenceServiceProvider.class.getPackage().getName() + ".services" ;
	
	public final static int FAKE = 0 ;
	public final static int JPA  = 1 ;
	public final static int LPA  = 2 ;
	
	/**
	 * Returns a persistence service for the default persistence implementation
	 * @param entityClass
	 * @return
	 */
	public final static <T> T getService( Class<T> entityClass ) {
		return getService( entityClass, JPA );
	}
	
	/**
	 * Returns a persistence service for the given persistence implementation
	 * @param serviceInterface
	 * @param implementationType
	 * @return
	 */
	public final static <T> T getService( Class<T> serviceInterface, int implementationType ) {
		
		
		if ( serviceInterface != null ) {
			
			//--- 1) define the full class name 
			String pkg    = "" ;
			String suffix = "" ;

			switch ( implementationType ) {
			
			case JPA :
				pkg = SERVICES_ROOT_PACKAGE + ".jpa" ;
				suffix = "JPA" ;
				break ;
				
			case LPA :
				pkg = SERVICES_ROOT_PACKAGE + ".lpa" ;
				suffix = "LPA" ;
				break ;
				
			case FAKE :
				pkg = SERVICES_ROOT_PACKAGE + ".fake" ;
				suffix = "FAKE" ;
				break ;
				
			default :
				throw new RuntimeException("Unknown implementation type !");
			}
			String serviceClassName = pkg + "." + serviceInterface.getSimpleName() + suffix ;
			
			//--- 2) try to load the class 
			Class<?> clazz ;
			Object instance = null ;
			try {
				 clazz = Class.forName(serviceClassName) ;
			} catch (ClassNotFoundException e) {
				throw new RuntimeException("Cannot load class " + serviceClassName );
			}

			if ( serviceInterface.isAssignableFrom(clazz) ) {

				//--- 3) try to create an instance of this class 
				try {
					instance = clazz.newInstance();
				} catch (InstantiationException e) {
					throw new RuntimeException("Cannot create instance for class " + serviceClassName + " (InstantiationException)");
				} catch (IllegalAccessException e) {
					throw new RuntimeException("Cannot create instance for class " + serviceClassName + " (IllegalAccessException)");
				}
				return (T) instance ;
				
			}
			else {
				throw new RuntimeException("Class " + serviceClassName + " is not an implementation of " + serviceInterface.getSimpleName() );
			}
		}
		else {
			throw new IllegalArgumentException("Entity class argument is null !");
		}
	}
	
}
