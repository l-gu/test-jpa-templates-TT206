/*
 * Created on 28 juin 2013 ( Date ISO 2013-06-28 - Time 07:20:40 )
 * Generated by Telosys Tools Generator ( version 2.0.5 )
 */
package org.demo.persistence.commons.jpa;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.PersistenceException;
import javax.persistence.Query;
import javax.persistence.TypedQuery;
import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.demo.persistence.PersistenceConfig;


/**
 * Generic JPA service operations (provided by Telosys Tools)
 * 
 * @param <T>
 * @param <PK>
 */
@SuppressWarnings("unchecked")
public abstract class GenericJpaService<T, PK extends java.io.Serializable> {

	private static final Predicate[] VOID_PREDICATE_ARRAY = {};
	
	/**
	 * The class of the entity managed by this instance of service
	 */
	private final Class<T> persistentClass;

	/**
	 * Constructor
	 * @param persistentClass
	 */
	public GenericJpaService(final Class<T> persistentClass) {
		this.persistentClass = persistentClass;
	}

	
	private final Object executeWithoutTransaction(JpaOperation operation) throws PersistenceException {
		JpaEnvironment jpaEnvironment = new JpaEnvironment( PersistenceConfig.JPA_PERSISTENCE_UNIT_NAME );
		return jpaEnvironment.executeWithoutTransaction(operation) ;
	}

	private final Object executeWithTransaction(JpaOperation operation) throws PersistenceException {
		JpaEnvironment jpaEnvironment = new JpaEnvironment( PersistenceConfig.JPA_PERSISTENCE_UNIT_NAME );
		return jpaEnvironment.executeWithTransaction(operation) ;
	}
	
	
	/**
	 * Find entity By Id
	 * @param id
	 * @return
	 */
	public T load(final PK id) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				return em.find(persistentClass, id);
			}
		} ;
		// JPA operation execution 
//		JpaEnvironment jpaEnvironment = new JpaEnvironment( PersistenceConfig.JPA_PERSISTENCE_UNIT_NAME );
//		return jpaEnvironment.executeWithoutTransaction(operation, persistentClass) ;
		return (T) executeWithoutTransaction(operation) ;
	}

	/**
	 * Load all entities
	 * @param <T>
	 * @param query
	 * @return
	 */
	public List<T> loadAll() {
//		final EntityManager em = getEntityManager();
//		final Query query = em.createQuery("from " + persistentClass.getName());
//		return query.getResultList();
		
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final Query query = em.createQuery("from " + persistentClass.getName());
				return query.getResultList();
			}
		} ;
		// JPA operation execution 
		return (List<T>) executeWithoutTransaction(operation) ;
	}

	/**
	 * Load a list of entities using a named query without parameter
	 * @param queryName
	 * @return
	 */
	public List<T> loadByNamedQuery(final String queryName) {
//		final EntityManager em = getEntityManager();
//		//final TypedQuery<T> q = em.createQuery(query, this.persistentClass);
//		final Query query = em.createNamedQuery(queryName);
//		return query.getResultList();

		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final Query query = em.createNamedQuery(queryName);
				return query.getResultList();
			}
		} ;
		// JPA operation execution 
		return (List<T>) executeWithoutTransaction(operation) ;
	}

	/**
	 * Load a list of entities using a named query with parameters
	 * @param queryName
	 * @param queryParameters
	 * @return
	 */
	public List<T> loadByNamedQuery(final String queryName, final Map<String, Object> queryParameters) {
//		final EntityManager em = getEntityManager();
//		final Query query = em.createNamedQuery(queryName);
//
//		final Iterator<String> i = queryParameters.keySet().iterator();
//		while (i.hasNext()) {
//			String key = i.next();
//			query.setParameter(key, queryParameters.get(key));
//		}
//
//		return query.getResultList();
		
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final Query query = em.createNamedQuery(queryName);
				final Iterator<String> i = queryParameters.keySet().iterator();
				while (i.hasNext()) {
					String key = i.next();
					query.setParameter(key, queryParameters.get(key));
				}				
				return query.getResultList();
			}
		} ;
		// JPA operation execution 
		return (List<T>) executeWithoutTransaction(operation) ;
	}

	/**
	 * Insert entity ( TRANSACTIONAL )
	 * @param <T>
	 * @return
	 */
	public void insert(final T entity) {
//		final EntityManager em = getEntityManager();
//		em.getTransaction().begin();
//		em.persist(entity);
//		em.getTransaction().commit();
		
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				em.persist(entity);
				return null;
			}
		} ;
		// JPA operation execution 
		executeWithTransaction(operation) ;
	}

	/**
	 * Save entity ( TRANSACTIONAL )
	 * @param <T>
	 * @param entity
	 * @return
	 */
	public T save(final T entityToSave) {
//		final EntityManager em = getEntityManager();
//		em.getTransaction().begin();
//		T managedEntity = em.merge(entityToSave);
//		em.getTransaction().commit();
//		return managedEntity;
		
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				T managedEntity = em.merge(entityToSave);
				return managedEntity;
			}
		} ;
		// JPA operation execution 
		return (T) executeWithTransaction(operation) ;
	}
	
	/**
	 * Delete entity by pk ( TRANSACTIONAL )
	 * @param pk
	 */
	public boolean delete(final PK pk) {
//		final EntityManager em = getEntityManager();
//		final T entity = em.find(this.persistentClass, pk);
//		if (entity != null) {
//			em.getTransaction().begin();
//			em.remove(entity);
//			em.getTransaction().commit();
//			return true ;
//		}
//		else {
//			return false ;
//		}

		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				final T entity = em.find(persistentClass, pk);
				if (entity != null) {
					em.remove(entity);
					return Boolean.TRUE ;
				}
				else {
					return Boolean.FALSE ;
				}
			}
		} ;
		// JPA operation execution 
		Boolean b = (Boolean) executeWithTransaction(operation) ;
		return b.booleanValue();
	}

	public List<T> search( final Map<String, Object> queryParameters ) {
		if ( queryParameters != null  ) {
			return this.searchWithParameters(queryParameters);
		}
		else {
			return this.loadAll();
		}
	}
	
	private List<T> searchWithParameters( final Map<String, Object> queryParameters ) {
		// JPA operation definition 
		JpaOperation operation = new JpaOperation() {
			@Override
			public Object exectue(EntityManager em) throws PersistenceException {
				CriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();
				CriteriaQuery<T> criteriaQuery = criteriaBuilder.createQuery(persistentClass);
				Root<T> from = criteriaQuery.from(persistentClass);

				List<Predicate> predicates = new ArrayList<Predicate>();

				for ( Map.Entry<String, Object> e : queryParameters.entrySet() ) {
					String expression = e.getKey() ;
					Object value = e.getValue() ;
					
					System.out.println("=== Criterion : " + expression + " : " + value );
					
					if ( value != null ) {
						boolean operatorFound = false ;
						int i = expression.indexOf(' ') ;
						if ( i >= 0 ) {
							String name = expression.substring(0, i);
							String oper = expression.substring(i, expression.length()).trim();
							System.out.println("name = '" + name + "'   oper = '" + oper + "'  value = '" + value + "'" );
							if ( oper.length() > 0 ) {
								operatorFound = true ;
								if ( value instanceof String ) {
									String strValue = (String) value ;
									if ( "=".equalsIgnoreCase(oper) ) {
										Predicate p = criteriaBuilder.equal( from.get(name), strValue ) ;
										predicates.add(p) ;
									}
									else if ( "like".equalsIgnoreCase(oper) ) {
										Predicate p = criteriaBuilder.like( from.<String>get(name), strValue ) ;
										predicates.add(p) ;
									}
									else {
										throw new RuntimeException("Search : invalid operator '" + oper +"' for String attribute") ;
									}
								}
								else if ( value instanceof Number ) {
									Number numValue = (Number) value ;
									if ( "=".equalsIgnoreCase(oper) ) {
										Predicate p = criteriaBuilder.equal( from.<Number>get(name), numValue ) ;
										predicates.add(p) ;
									}
									else if ( "!=".equalsIgnoreCase(oper) || "<>".equalsIgnoreCase(oper)) {
										Predicate p = criteriaBuilder.notEqual( from.<Number>get(name), numValue ) ;
										predicates.add(p) ;
									}
									else if ( ">".equalsIgnoreCase(oper) ) {
										Predicate p = criteriaBuilder.gt( from.<Number>get(name), numValue ) ;
										predicates.add(p) ;
									}
									else if ( "<".equalsIgnoreCase(oper) ) {
										Predicate p = criteriaBuilder.lt( from.<Number>get(name), numValue ) ;
										predicates.add(p) ;
									}
									else if ( ">=".equalsIgnoreCase(oper) ) {
										Predicate p = criteriaBuilder.ge( from.<Number>get(name), numValue ) ;
										predicates.add(p) ;
									}
									else if ( "<=".equalsIgnoreCase(oper) ) {
										Predicate p = criteriaBuilder.le( from.<Number>get(name), numValue ) ;
										predicates.add(p) ;
									}
									else {
										throw new RuntimeException("Search : invalid operator '" + oper +"' for Number attribute") ;
									}
								}
							}
						}
						if ( ! operatorFound ) {
							predicates.add( criteriaBuilder.equal( from.get(expression), value ) ) ;
						}
					}
				}
				
				criteriaQuery.where( predicates.toArray(VOID_PREDICATE_ARRAY) );
				
				TypedQuery<T> typedQuery = em.createQuery(criteriaQuery);
				return typedQuery.getResultList();
			}
		} ;
		// JPA operation execution 
		return (List<T>) executeWithTransaction(operation) ;
	}
	
	/**
	public List<T> searchOLD( final Map<String, Object> queryParameters ) {
		System.out.println("=== SEARCH");
		final EntityManager em = getEntityManager();
		if ( queryParameters != null  ) {
			CriteriaBuilder criteriaBuilder = em.getCriteriaBuilder();
			CriteriaQuery<T> criteriaQuery = criteriaBuilder.createQuery(persistentClass);
			Root<T> from = criteriaQuery.from(persistentClass);

			List<Predicate> predicates = new ArrayList<Predicate>();

			for ( Map.Entry<String, Object> e : queryParameters.entrySet() ) {
				String expression = e.getKey() ;
				Object value = e.getValue() ;
				
				System.out.println("=== Criterion : " + expression + " : " + value );
				
				if ( value != null ) {
					boolean operatorFound = false ;
					int i = expression.indexOf(' ') ;
					if ( i >= 0 ) {
						String name = expression.substring(0, i);
						String oper = expression.substring(i, expression.length()).trim();
						System.out.println("name = '" + name + "'   oper = '" + oper + "'  value = '" + value + "'" );
						if ( oper.length() > 0 ) {
							operatorFound = true ;
							if ( value instanceof String ) {
								String strValue = (String) value ;
								if ( "=".equalsIgnoreCase(oper) ) {
									Predicate p = criteriaBuilder.equal( from.get(name), strValue ) ;
									predicates.add(p) ;
								}
								else if ( "like".equalsIgnoreCase(oper) ) {
									Predicate p = criteriaBuilder.like( from.<String>get(name), strValue ) ;
									predicates.add(p) ;
								}
								else {
									throw new RuntimeException("Search : invalid operator '" + oper +"' for String attribute") ;
								}
							}
							else if ( value instanceof Number ) {
								Number numValue = (Number) value ;
								if ( "=".equalsIgnoreCase(oper) ) {
									Predicate p = criteriaBuilder.equal( from.<Number>get(name), numValue ) ;
									predicates.add(p) ;
								}
								else if ( "!=".equalsIgnoreCase(oper) || "<>".equalsIgnoreCase(oper)) {
									Predicate p = criteriaBuilder.notEqual( from.<Number>get(name), numValue ) ;
									predicates.add(p) ;
								}
								else if ( ">".equalsIgnoreCase(oper) ) {
									Predicate p = criteriaBuilder.gt( from.<Number>get(name), numValue ) ;
									predicates.add(p) ;
								}
								else if ( "<".equalsIgnoreCase(oper) ) {
									Predicate p = criteriaBuilder.lt( from.<Number>get(name), numValue ) ;
									predicates.add(p) ;
								}
								else if ( ">=".equalsIgnoreCase(oper) ) {
									Predicate p = criteriaBuilder.ge( from.<Number>get(name), numValue ) ;
									predicates.add(p) ;
								}
								else if ( "<=".equalsIgnoreCase(oper) ) {
									Predicate p = criteriaBuilder.le( from.<Number>get(name), numValue ) ;
									predicates.add(p) ;
								}
								else {
									throw new RuntimeException("Search : invalid operator '" + oper +"' for Number attribute") ;
								}
							}
						}
					}
					if ( ! operatorFound ) {
						predicates.add( criteriaBuilder.equal( from.get(expression), value ) ) ;
					}
				}
			}
			
			criteriaQuery.where( predicates.toArray(VOID_PREDICATE_ARRAY) );
			
			TypedQuery<T> typedQuery = em.createQuery(criteriaQuery);
			return typedQuery.getResultList();
		}
		else {
			return this.loadAll();
		}
	}
	**/
}
